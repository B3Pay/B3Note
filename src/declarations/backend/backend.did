type EncryptedText = record {
  time_lock : nat64;
  public_key : vec nat8;
  plain_text : text;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok : bool; Err : text };
service : {
  decrypt_text : (text, text) -> (Result);
  encrypted_ibe_decryption_key_for_caller : (vec nat8, vec nat8) -> (text);
  encrypted_symmetric_key_for_caller : (vec nat8) -> (text);
  get_encrypted_text : (vec nat8, nat64) -> (text);
  get_encrypted_texts : () -> (vec record { nat64; EncryptedText }) query;
  ibe_encryption_key : () -> (text);
  read_encrypted_text : (nat64) -> (text);
  save_encrypted_text : (EncryptedText) -> ();
  symmetric_key_verification_key : () -> (text);
  symmetric_key_verification_key_for : (opt principal) -> (text);
  verify_caller : (text, text, text) -> (Result_1);
  verify_ownership_caller : (text, text, text) -> (bool);
  verify_signature_with_encrypted_key_caller : (text, text) -> (bool);
}