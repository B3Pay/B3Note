type AnonymousUserData = record {
  texts : vec nat64;
  decryption_key : vec nat8;
};
type AuthenticatedSignature = record {
  signature : vec nat8;
  created_at : nat64;
};
type LogEntry = record {
  counter : nat64;
  file : text;
  line : nat32;
  version : text;
  message : text;
  timestamp : nat64;
};
type OneTimeKey = record {
  tries : nat8;
  time_lock : nat64;
  public_key : vec nat8;
};
type PartitionDetail = record { len : nat64; name : text };
type Result = variant { Ok : record { vec nat8; vec nat8 }; Err : text };
type Task = variant {
  SendText : record { body : text; phone_number : text };
  SendEmail : record { subject : text; body : text; email : text };
  Initialize;
};
type TaskTimerEntry = record { task : Task; time : nat64 };
type UserData = record {
  texts : vec nat64;
  signature : opt AuthenticatedSignature;
  public_key : vec nat8;
};
type UserText = record { id : text; "text" : vec nat8 };
service : () -> {
  anonymous_user : (vec nat8) -> (AnonymousUserData) query;
  anonymous_user_notes : (vec nat8) -> (vec UserText) query;
  anonymous_users : () -> (vec record { vec nat8; AnonymousUserData }) query;
  edit_encrypted_text : (nat64, vec nat8, opt vec nat8) -> ();
  encrypted_ibe_decryption_key_for_caller : (vec nat8) -> (vec nat8);
  encrypted_symmetric_key_for_caller : (vec nat8) -> (vec nat8);
  encrypted_texts : () -> (vec UserText) query;
  get_one_time_key : (nat64) -> (vec nat8) query;
  get_one_time_key_details : (nat64) -> (OneTimeKey) query;
  ibe_encryption_key : () -> (vec nat8) query;
  partition_details : () -> (vec PartitionDetail) query;
  print_log_entries : () -> (vec LogEntry) query;
  print_log_entries_page : (nat64, opt nat64) -> (vec text) query;
  read_with_one_time_key : (nat64, vec nat8, vec nat8) -> (Result);
  save_encrypted_text : (vec nat8, opt vec nat8) -> (nat64);
  schedule_task : (nat64, Task) -> ();
  set_one_time_key : (nat64, vec nat8) -> ();
  symmetric_key_verification_key : () -> (vec nat8) query;
  timers : () -> (vec TaskTimerEntry) query;
  user_data : () -> (UserData) query;
  user_notes : (opt vec nat8) -> (vec UserText) query;
}